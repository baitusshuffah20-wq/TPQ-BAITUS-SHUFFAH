generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String
  phone                 String?
  role                  String
  password              String
  avatar                String?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  attendanceAsMusyrif   Attendance[]           @relation("MusyrifAttendance")
  auditLogs             AuditLog[]
  cartItems             CartItem[]
  donationsConfirmed    Donation[]             @relation("DonationConfirmer")
  emailMessages         EmailMessage[]
  emailTemplates        EmailTemplate[]
  reportsGenerated      FinancialReport[]      @relation("ReportGenerator")
  hafalanAsMusyrif      Hafalan[]              @relation("MusyrifHafalan")
  musyrif               Musyrif[]
  notificationTemplates NotificationTemplate[]
  notificationsCreated  Notification[]         @relation("NotificationCreator")
  notifications         Notification[]
  orders                Order[]
  paymentTransactions   PaymentTransaction[]
  santriAsWali          Santri[]               @relation("WaliSantri")
  subscriptions         Subscription[]
  testimonials          Testimonial[]          @relation("Testimonials")
  themes                Theme[]
  transactionsCreated   Transaction[]          @relation("TransactionCreator")
  whatsappIncoming      WhatsAppIncoming[]     @relation("WhatsAppIncoming")
  whatsappLogs          WhatsAppLog[]          @relation("WhatsAppLogs")
  whatsappMessages      WhatsAppMessage[]

  @@map("users")
}

model Santri {
  id              String            @id @default(cuid())
  nis             String            @unique
  name            String
  birthDate       DateTime
  birthPlace      String
  gender          String
  address         String
  phone           String?
  email           String?
  photo           String?
  status          String            @default("ACTIVE")
  enrollmentDate  DateTime          @default(now())
  graduationDate  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  waliId          String
  halaqahId       String?
  attendance      Attendance[]
  hafalan         Hafalan[]
  hafalanProgress HafalanProgress[] @relation("SantriHafalanProgress")
  payments        Payment[]
  halaqah         Halaqah?          @relation("SantriHalaqah", fields: [halaqahId], references: [id])
  wali            User              @relation("WaliSantri", fields: [waliId], references: [id])
  sppRecords      SPPRecord[]       @relation("SantriSPP")
  testimonials    Testimonial[]
  transactions    Transaction[]     @relation("SantriTransactions")
  achievements    SantriAchievement[]

  @@index([halaqahId], map: "santri_halaqahId_fkey")
  @@index([waliId], map: "santri_waliId_fkey")
  @@map("santri")
}

model Musyrif {
  id               String   @id @default(cuid())
  name             String
  gender           String
  birthDate        DateTime
  birthPlace       String
  address          String
  phone            String
  email            String
  specialization   String?
  joinDate         DateTime @default(now())
  status           String   @default("ACTIVE")
  photo            String?
  educationData    String?
  experienceData   String?
  certificatesData String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String?
  halaqahId        String?  @unique
  halaqah          Halaqah? @relation("MusyrifHalaqah")
  user             User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "musyrif_userId_fkey")
  @@map("musyrif")
}

model Halaqah {
  id          String            @id @default(cuid())
  name        String
  description String?
  capacity    Int               @default(20)
  level       String
  status      String            @default("ACTIVE")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  musyrifId   String?           @unique
  attendance  Attendance[]
  musyrif     Musyrif?          @relation("MusyrifHalaqah", fields: [musyrifId], references: [id])
  schedules   HalaqahSchedule[]
  santri      Santri[]          @relation("SantriHalaqah")

  @@map("halaqah")
}

model HalaqahSchedule {
  id        String   @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String
  room      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  halaqahId String
  halaqah   Halaqah  @relation(fields: [halaqahId], references: [id], onDelete: Cascade)

  @@index([halaqahId], map: "halaqah_schedules_halaqahId_fkey")
  @@map("halaqah_schedules")
}

model Hafalan {
  id         String   @id @default(cuid())
  surahId    Int
  surahName  String
  ayahStart  Int
  ayahEnd    Int
  type       String
  status     String   @default("PENDING")
  grade      Int?
  notes      String?
  recordedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  santriId   String
  musyrifId  String
  audioUrl   String?
  musyrif    User     @relation("MusyrifHafalan", fields: [musyrifId], references: [id])
  santri     Santri   @relation(fields: [santriId], references: [id], onDelete: Cascade)

  @@index([musyrifId], map: "hafalan_musyrifId_fkey")
  @@index([santriId], map: "hafalan_santriId_fkey")
  @@map("hafalan")
}

model HafalanProgress {
  id          String    @id @default(cuid())
  santriId    String
  surahId     Int
  surahName   String
  totalAyah   Int
  memorized   Int       @default(0)
  inProgress  Int       @default(0)
  lastAyah    Int       @default(0)
  startDate   DateTime  @default(now())
  targetDate  DateTime?
  completedAt DateTime?
  status      String    @default("IN_PROGRESS")
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  santri      Santri    @relation("SantriHafalanProgress", fields: [santriId], references: [id], onDelete: Cascade)

  @@unique([santriId, surahId])
  @@index([santriId], map: "hafalan_progress_santriId_fkey")
  @@map("hafalan_progress")
}

model Attendance {
  id           String    @id @default(cuid())
  date         DateTime
  status       String
  checkInTime  DateTime?
  checkOutTime DateTime?
  notes        String?
  latitude     Float?
  longitude    Float?
  photo        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  santriId     String
  halaqahId    String
  musyrifId    String
  halaqah      Halaqah   @relation(fields: [halaqahId], references: [id])
  musyrif      User      @relation("MusyrifAttendance", fields: [musyrifId], references: [id])
  santri       Santri    @relation(fields: [santriId], references: [id], onDelete: Cascade)

  @@unique([santriId, halaqahId, date])
  @@index([halaqahId], map: "attendance_halaqahId_fkey")
  @@index([musyrifId], map: "attendance_musyrifId_fkey")
  @@map("attendance")
}

model Payment {
  id            String        @id @default(cuid())
  type          String
  amount        Int
  dueDate       DateTime
  paidDate      DateTime?
  status        String        @default("PENDING")
  method        String?
  reference     String?
  notes         String?
  midtransToken String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  santriId      String
  santri        Santri        @relation(fields: [santriId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@index([santriId], map: "payments_santriId_fkey")
  @@map("payments")
}

model SPPSetting {
  id          String      @id @default(cuid())
  name        String
  amount      Float
  description String?
  isActive    Boolean     @default(true)
  level       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sppRecords  SPPRecord[]

  @@map("spp_settings")
}

model SPPRecord {
  id            String       @id @default(cuid())
  month         Int
  year          Int
  amount        Float
  dueDate       DateTime
  paidDate      DateTime?
  status        String       @default("PENDING")
  paidAmount    Float        @default(0)
  discount      Float        @default(0)
  fine          Float        @default(0)
  notes         String?
  paymentMethod String?
  receiptNumber String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  santriId      String
  sppSettingId  String
  transactionId String?      @unique
  santri        Santri       @relation("SantriSPP", fields: [santriId], references: [id], onDelete: Cascade)
  sppSetting    SPPSetting   @relation(fields: [sppSettingId], references: [id])
  transaction   Transaction? @relation("SPPTransaction", fields: [transactionId], references: [id])

  @@unique([santriId, month, year])
  @@index([sppSettingId], map: "spp_records_sppSettingId_fkey")
  @@map("spp_records")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldData   String?
  newData   String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "audit_logs_userId_fkey")
  @@map("audit_logs")
}

model News {
  id          String    @id @default(cuid())
  title       String
  excerpt     String
  content     String
  image       String?
  author      String
  category    String
  status      String    @default("DRAFT")
  featured    Boolean   @default(false)
  views       Int       @default(0)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("news")
}

model WhatsAppLog {
  id          String    @id @default(cuid())
  recipientId String
  messageType String
  messageData String
  messageId   String
  status      String    @default("PENDING")
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  failedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  recipient   User      @relation("WhatsAppLogs", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId], map: "whatsapp_logs_recipientId_fkey")
  @@map("whatsapp_logs")
}

model WhatsAppIncoming {
  id             String    @id @default(cuid())
  senderId       String
  senderPhone    String
  messageType    String
  messageContent String
  receivedAt     DateTime
  processed      Boolean   @default(false)
  processedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sender         User      @relation("WhatsAppIncoming", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId], map: "whatsapp_incoming_senderId_fkey")
  @@map("whatsapp_incoming")
}

model EmailLog {
  id        String   @id @default(cuid())
  recipient String
  subject   String
  status    String   @default("PENDING")
  messageId String
  template  String   @default("")
  error     String   @default("")
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_logs")
}

model Program {
  id          String   @id @default(cuid())
  title       String
  description String
  features    String
  duration    String
  ageGroup    String
  schedule    String
  price       String
  image       String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("programs")
}

model Testimonial {
  id         String   @id @default(cuid())
  content    String
  rating     Int      @default(5)
  isApproved Boolean  @default(false)
  isFeatured Boolean  @default(false)
  santriId   String?
  waliId     String?
  authorName String
  authorRole String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  santri     Santri?  @relation(fields: [santriId], references: [id])
  wali       User?    @relation("Testimonials", fields: [waliId], references: [id])

  @@index([santriId], map: "testimonials_santriId_fkey")
  @@index([waliId], map: "testimonials_waliId_fkey")
  @@map("testimonials")
}

model AchievementBadge {
  id                String              @id @default(cuid())
  name              String
  nameArabic        String
  description       String
  icon              String
  color             String
  category          String
  criteriaType      String
  criteriaValue     Int
  criteriaCondition String
  timeframe         String?
  rarity            String
  points            Int
  isActive          Boolean             @default(true)
  unlockMessage     String
  shareMessage      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  santriAchievements SantriAchievement[]

  @@map("achievement_badges")
}

model SantriAchievement {
  id                String           @id @default(cuid())
  santriId          String
  badgeId           String
  awardedAt         DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  badge             AchievementBadge @relation(fields: [badgeId], references: [id])
  santri            Santri           @relation(fields: [santriId], references: [id], onDelete: Cascade)

  @@unique([santriId, badgeId])
  @@index([badgeId], map: "santri_achievements_badgeId_fkey")
  @@map("santri_achievements")
}

model WhatsAppMessage {
  id          String   @id @default(cuid())
  userId      String
  messageType String
  content     String
  status      String   @default("PENDING")
  sentAt      DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "whatsapp_messages_userId_fkey")
  @@map("whatsapp_messages")
}

model EmailMessage {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  content   String
  status    String   @default("PENDING")
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "email_messages_userId_fkey")
  @@map("email_messages")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  content     String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([createdById], map: "email_templates_createdById_fkey")
  @@map("email_templates")
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String
  title       String
  content     String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([createdById], map: "notification_templates_createdById_fkey")
  @@map("notification_templates")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  content   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String
  creator   User      @relation("NotificationCreator", fields: [createdBy], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdBy], map: "notifications_createdBy_fkey")
  @@index([userId], map: "notifications_userId_fkey")
  @@map("notifications")
}

model FinancialAccount {
  id           String        @id @default(cuid())
  name         String
  accountType  String
  balance      Float         @default(0)
  description  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("financial_accounts")
}

model Transaction {
  id                String          @id @default(cuid())
  transactionType   String
  amount            Float
  description       String?
  date              DateTime
  reference         String?
  status            String          @default("COMPLETED")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accountId         String
  createdById       String
  santriId          String?
  paymentId         String?
  account           FinancialAccount @relation(fields: [accountId], references: [id])
  createdBy         User            @relation("TransactionCreator", fields: [createdById], references: [id])
  payment           Payment?        @relation(fields: [paymentId], references: [id])
  santri            Santri?         @relation("SantriTransactions", fields: [santriId], references: [id])
  sppRecord         SPPRecord?      @relation("SPPTransaction")

  @@index([accountId], map: "transactions_accountId_fkey")
  @@index([createdById], map: "transactions_createdById_fkey")
  @@index([paymentId], map: "transactions_paymentId_fkey")
  @@index([santriId], map: "transactions_santriId_fkey")
  @@map("transactions")
}

model FinancialReport {
  id          String   @id @default(cuid())
  reportType  String
  period      String
  startDate   DateTime
  endDate     DateTime
  data        String
  summary     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  generatedBy String
  generator   User     @relation("ReportGenerator", fields: [generatedBy], references: [id])

  @@index([generatedBy], map: "financial_reports_generatedBy_fkey")
  @@map("financial_reports")
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int        @default(0)
  image       String?
  category    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId], map: "cart_items_productId_fkey")
  @@index([userId], map: "cart_items_userId_fkey")
  @@map("cart_items")
}

model Order {
  id              String          @id @default(cuid())
  orderNumber     String          @unique
  status          String          @default("PENDING")
  totalAmount     Float
  notes           String?
  shippingAddress String?
  paymentMethod   String?
  paymentStatus   String          @default("PENDING")
  paidAt          DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  items           OrderItem[]
  transactions    PaymentTransaction[]
  user            User            @relation(fields: [userId], references: [id])

  @@index([userId], map: "orders_userId_fkey")
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([productId], map: "order_items_productId_fkey")
  @@map("order_items")
}

model PaymentTransaction {
  id            String   @id @default(cuid())
  amount        Float
  paymentMethod String
  status        String   @default("PENDING")
  reference     String?
  notes         String?
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderId       String
  userId        String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id])

  @@index([orderId], map: "payment_transactions_orderId_fkey")
  @@index([userId], map: "payment_transactions_userId_fkey")
  @@map("payment_transactions")
}

model Donation {
  id          String    @id @default(cuid())
  amount      Float
  donorName   String
  donorEmail  String?
  donorPhone  String?
  purpose     String
  message     String?
  status      String    @default("PENDING")
  paymentMethod String?
  reference   String?
  confirmedAt DateTime?
  confirmedBy String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmer   User?     @relation("DonationConfirmer", fields: [confirmedBy], references: [id])

  @@index([confirmedBy], map: "donations_confirmedBy_fkey")
  @@map("donations")
}

model Subscription {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "subscriptions_userId_fkey")
  @@map("subscriptions")
}

model SiteSettings {
  id                String   @id @default(cuid())
  siteName          String   @default("Rumah Tahfidz Baitus Shuffah")
  siteDescription   String   @default("Sistem Informasi Rumah Tahfidz")
  contactEmail      String   @default("info@rumahtahfidz.com")
  contactPhone      String   @default("+62123456789")
  address           String   @default("Jl. Contoh No. 123, Jakarta")
  socialFacebook    String?
  socialInstagram   String?
  socialTwitter     String?
  socialYoutube     String?
  logoUrl           String?
  faviconUrl        String?
  maintenanceMode   Boolean  @default(false)
  registrationOpen  Boolean  @default(true)
  paymentGateway    String   @default("MANUAL")
  paymentApiKey     String?
  whatsappApiKey    String?
  whatsappInstance  String?
  emailSmtpHost     String?
  emailSmtpPort     Int?
  emailSmtpUser     String?
  emailSmtpPass     String?
  emailFromAddress  String?
  emailFromName     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("site_settings")
}

model Theme {
  id        String   @id @default(cuid())
  name      String
  colors    Json
  buttons   Json
  fonts     Json
  layout    Json
  logo      Json
  isActive  Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "theme_userId_fkey")
  @@map("themes")
}